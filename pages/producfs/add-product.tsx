import React, { useState } from 'react';
import Navbar from '@/components/Home/Navbar';
import Footer from '@/components/Footer';
import { Form } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { getFirestore, collection, addDoc, doc, updateDoc } from "firebase/firestore";
import { Product } from '@/lib/types/products';
import CustomButton from '@/components/CustomButton';
import { useToast } from '@/components/ui/use-toast';

const AddProduct = () => {
  const [product, setProduct] = useState<Product>({
    id: '',
    name: '',
    description: '',
    quantity: 0,
    price: 0,
    category: '',
    imageUrl: ''
  });
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [isLoading, setIsLoading] = useState(false)
  const {toast} = useToast()
  const db = getFirestore();
  const storage = getStorage();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setProduct({ ...product, [e.target.name]: e.target.value });
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setImageFile(e.target.files[0]);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true)

    let imageUrl = '';
    if (imageFile) {
      const imageRef = ref(storage, `images/${imageFile.name}`);
      await uploadBytes(imageRef, imageFile);
      imageUrl = await getDownloadURL(imageRef);
    }

    const productData = {
      ...product,
      imageUrl
    };

    if (product.id) {
      const productDoc = doc(db, 'products', product.id);
      await updateDoc(productDoc, productData);
    } else {
      // If there's no id, add a new product and use the generated id
      const docRef = await addDoc(collection(db, 'products'), productData);
      productData.id = docRef.id; // id generated by Firestore
      const productDoc = doc(db, 'products', docRef.id);
      await updateDoc(productDoc, productData); // update with the correct id
    }

    setProduct({
      id: '',
      name: '',
      description: '',
      quantity: 0,
      price: 0,
      category: '',
      imageUrl: ''
    });
    setImageFile(null);
    toast({title: 'Product saved successfully!'})
    setIsLoading(false)
  };

  return (
    <>
      <div className="container mx-auto p-4">
        <h1 className="text-2xl font-bold mb-4 text-center">Add Product</h1>
        <form onSubmit={handleSubmit} className='flex flex-col gap-3'>
          <Input name="name" placeholder="Product Name" value={product.name} onChange={handleChange} required />
          <Input name="description" placeholder="Description" value={product.description} onChange={handleChange} required />
          <Input name="quantity" type="number" placeholder="Quantity" value={product.quantity} onChange={handleChange} required />
          <Input name="price" type="number" placeholder="Price" value={product.price} onChange={handleChange} required />
          <Input name="category" placeholder="Category" value={product.category} onChange={handleChange} required />
          <Input type="file" accept="image/*" onChange={handleImageChange} required />
          <CustomButton type="submit" isLoading={isLoading} disabled={isLoading} className='bg-black hover:bg-black/55 text-white'>Submit</CustomButton>
        </form>
      </div>
    </>
  );
};

export default AddProduct;
